// Generated by Framer (0c5492c)

import { addFonts, addPropertyControls, ControlType, cx, CycleVariantState, getLoadingLazyAtYPosition, Image, useComponentViewport, useLocaleInfo, useVariantState, withCSS } from "framer";
import { LayoutGroup, motion, MotionConfigContext } from "framer-motion";
import * as React from "react";
import { useRef } from "react";

const cycleOrder = ["MMRB_RV4g", "NwDKC01SU", "MsMKTs07X", "frzwlliSo"];

const serializationHash = "framer-ZFAcm"

const variantClassNames = {frzwlliSo: "framer-v-jb2163", MMRB_RV4g: "framer-v-3v1xi3", MsMKTs07X: "framer-v-17kbalj", NwDKC01SU: "framer-v-1qzxeu"};

function addPropertyOverrides(overrides, ...variants) {
const nextOverrides = {}
variants?.forEach(variant => variant && Object.assign(nextOverrides, overrides[variant]))
return nextOverrides
}

const toResponsiveImage = (value) => {
    if (typeof value === "object" && value !== null && typeof value.src === "string") {
        return value;
    };
    return typeof value === "string" ? {src: value} : undefined;
};


const transition1 = {bounce: 0.2, delay: 0, duration: 0.4, type: "spring"}

const Transition = ({value, children}) => {
const config = React.useContext(MotionConfigContext)
const transition = value ?? config.transition
const contextValue = React.useMemo(() => ({ ...config, transition }), [JSON.stringify(transition)])
return <MotionConfigContext.Provider value={contextValue}>{children}</MotionConfigContext.Provider>
}

const Variants = motion.create(React.Fragment)

const humanReadableVariantMap = {"Small desktop": "NwDKC01SU", Desktop: "MMRB_RV4g", Phone: "frzwlliSo", Tablet: "MsMKTs07X"}

const getProps = ({height, id, image, width, ...props}) => { return {...props, variant: humanReadableVariantMap[props.variant] ?? props.variant ?? "MMRB_RV4g", YIbpTMYRX: image ?? props.YIbpTMYRX} }

const createLayoutDependency = (props, variants) => {if (props.layoutDependency) return variants.join('-') + props.layoutDependency
return variants.join('-')}

export interface Props extends React.HTMLAttributes<HTMLDivElement> { style?: Record<string, unknown>;className?: string;layoutId?: string | number;variant?: keyof typeof humanReadableVariantMap;image?: {src: string; srcSet?: string; alt?: string}; }

const Component = React.forwardRef<HTMLDivElement, Props>(function(props, ref) {

const fallbackRef = useRef<HTMLElement>(null)

const refBinding = ref ?? fallbackRef

const defaultLayoutId = React.useId()

const { activeLocale, setLocale } = useLocaleInfo()

const componentViewport = useComponentViewport()

const {style, className, layoutId, variant, YIbpTMYRX, ...restProps} = getProps(props)

const {baseVariant, classNames, clearLoadingGesture, gestureHandlers, gestureVariant, isLoading, setGestureState, setVariant, variants} = useVariantState({cycleOrder, defaultVariant: "MMRB_RV4g", ref: refBinding, variant, variantClassNames})

const layoutDependency = createLayoutDependency(props, variants)

const sharedStyleClassNames = []

const scopingClassNames = cx(serializationHash, ...sharedStyleClassNames)

return (<LayoutGroup id={layoutId ?? defaultLayoutId}><Variants animate={variants} initial={false}><Transition value={transition1}><Image {...restProps} {...gestureHandlers} background={{alt: "", fit: "fill", loading: getLoadingLazyAtYPosition((componentViewport?.y || 0)), sizes: componentViewport?.width || "100vw", ...toResponsiveImage(YIbpTMYRX)}} className={cx(scopingClassNames, "framer-3v1xi3", className, classNames)} data-framer-name={"Desktop"} layoutDependency={layoutDependency} layoutId={"MMRB_RV4g"} ref={refBinding} style={{borderBottomLeftRadius: 10, borderBottomRightRadius: 10, borderTopLeftRadius: 10, borderTopRightRadius: 10, ...style}} {...addPropertyOverrides({frzwlliSo: {"data-framer-name": "Phone"}, MsMKTs07X: {"data-framer-name": "Tablet"}, NwDKC01SU: {"data-framer-name": "Small desktop"}}, baseVariant, gestureVariant)}/></Transition></Variants></LayoutGroup>)

});

const css = ["@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }", ".framer-ZFAcm.framer-zboaak, .framer-ZFAcm .framer-zboaak { display: block; }", ".framer-ZFAcm.framer-3v1xi3 { align-content: center; align-items: center; display: flex; flex-direction: column; flex-wrap: nowrap; gap: 0px; height: 201px; justify-content: center; overflow: hidden; padding: 0px; position: relative; width: 201px; will-change: var(--framer-will-change-override, transform); }", "@supports (background: -webkit-named-image(i)) and (not (font-palette:dark)) { .framer-ZFAcm.framer-3v1xi3 { gap: 0px; } .framer-ZFAcm.framer-3v1xi3 > * { margin: 0px; margin-bottom: calc(0px / 2); margin-top: calc(0px / 2); } .framer-ZFAcm.framer-3v1xi3 > :first-child { margin-top: 0px; } .framer-ZFAcm.framer-3v1xi3 > :last-child { margin-bottom: 0px; } }", ".framer-ZFAcm.framer-v-1qzxeu.framer-3v1xi3 { aspect-ratio: 1.0025252525252526 / 1; height: var(--framer-aspect-ratio-supported, 163px); width: 163px; }", ".framer-ZFAcm.framer-v-17kbalj.framer-3v1xi3 { aspect-ratio: 1.0025252525252526 / 1; height: var(--framer-aspect-ratio-supported, 164px); width: 164px; }", ".framer-ZFAcm.framer-v-jb2163.framer-3v1xi3 { aspect-ratio: 1.0025252525252526 / 1; height: var(--framer-aspect-ratio-supported, 148px); width: 148px; }"]

/**
 * This is a generated Framer component.
 * @framerIntrinsicHeight 200.5
 * @framerIntrinsicWidth 201
 * @framerCanvasComponentVariantDetails {"propertyName":"variant","data":{"default":{"layout":["fixed","fixed"]},"NwDKC01SU":{"layout":["fixed","fixed"]},"MsMKTs07X":{"layout":["fixed","fixed"]},"frzwlliSo":{"layout":["fixed","fixed"]}}}
 * @framerVariables {"YIbpTMYRX":"image"}
 * @framerImmutableVariables true
 * @framerDisplayContentsDiv false
 * @framerAutoSizeImages true
 * @framerComponentViewportWidth true
 * @framerColorSyntax true
 */
const FramerQNfG3nOFA: React.ComponentType<Props> = withCSS(Component, css, "framer-ZFAcm") as typeof Component;
export default FramerQNfG3nOFA;

FramerQNfG3nOFA.displayName = "Moment regular";

FramerQNfG3nOFA.defaultProps = {height: 200.5, width: 201};

addPropertyControls(FramerQNfG3nOFA, {variant: {options: ["MMRB_RV4g", "NwDKC01SU", "MsMKTs07X", "frzwlliSo"], optionTitles: ["Desktop", "Small desktop", "Tablet", "Phone"], title: "Variant", type: ControlType.Enum}, YIbpTMYRX: {description: "Place your image", title: "Image", type: ControlType.ResponsiveImage}} as any)

addFonts(FramerQNfG3nOFA, [{explicitInter: true, fonts: []}], {supportsExplicitInterCodegen: true})